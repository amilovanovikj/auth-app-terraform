on:
  workflow_dispatch:
    inputs:
      command:
        description: |
          The terraform command to run.
          Possible values:
            [ plan, apply, destroy ]
        required: true
        default: plan
      environment:
        description: |
          The environment to provision.
          Possible values:
            [ dev, test, prod ]
        required: true
        default: dev

env:
  ARM_CLIENT_ID:        ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET:    ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID:        ${{ secrets.ARM_TENANT_ID }}
  ARM_ACCESS_KEY:       ${{ secrets.ARM_ACCESS_KEY }}
  STORAGE_ACCOUNT_NAME: tfstate01auth
  RESOURCE_GROUP_NAME:  auth-shared-rg

jobs:
  terraform:
    name: Terraform 
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
    - name: Az login
      run: |
        az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} -t ${{ secrets.ARM_TENANT_ID }} > /dev/null
        az account set -s ${{ secrets.ARM_SUBSCRIPTION_ID }} > /dev/null
    - name: Get runner public IP
      id: ip
      uses: haythem/public-ip@v1.2
    - name: Add runner IP to storage account firewall
      run: |
        az storage account network-rule add -n ${{ env.STORAGE_ACCOUNT_NAME }} -g ${{ env.RESOURCE_GROUP_NAME }} --ip-address ${{ steps.ip.outputs.ipv4 }} > /dev/null
        sleep 10s
    - name: Terraform init
      run: |
        terraform init -upgrade \
          -backend-config="key=auth-${{ github.event.inputs.environment }}.tfstate"
    - name: Terraform ${{ github.event.inputs.command }}
      run: |
        case ${{ github.event.inputs.command }} in
          plan)
            terraform plan -input=false \
              -var 'env_name=${{ github.event.inputs.environment }}' \
              -var 'vault_pass=${{ secrets.VAULT_PASS }}' \
              -var 'sql_login=${{ secrets.SQL_LOGIN }}' \
              -var 'sql_password=${{ secrets.SQL_PASSWORD }}'
            ;;
          apply)
            terraform apply -input=false -auto-approve \
              -var 'env_name=${{ github.event.inputs.environment }}' \
              -var 'vault_pass=${{ secrets.VAULT_PASS }}' \
              -var 'sql_login=${{ secrets.SQL_LOGIN }}' \
              -var 'sql_password=${{ secrets.SQL_PASSWORD }}'
            bash acr-firewall-allow.sh apply
            ;;
          destroy)
            bash acr-firewall-allow.sh destroy
            terraform destroy -input=false -auto-approve \
              -var 'env_name=${{ github.event.inputs.environment }}' \
              -var 'vault_pass=${{ secrets.VAULT_PASS }}' \
              -var 'sql_login=${{ secrets.SQL_LOGIN }}' \
              -var 'sql_password=${{ secrets.SQL_PASSWORD }}'
            ;;
          *)
            echo "Invalid command: ${{ github.event.inputs.command }}"
            ;;
        esac
    - name: Remove runner IP from storage account firewall
      if: always()
      run: |
        az storage account network-rule remove -n ${{ env.STORAGE_ACCOUNT_NAME }} -g ${{ env.RESOURCE_GROUP_NAME }} --ip-address ${{ steps.ip.outputs.ipv4 }} > /dev/null
    - name: Az logout
      if: always()
      run: az logout